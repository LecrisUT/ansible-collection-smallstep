# We set up 3 provisioners with custom claims to fully test the module:
# claims-single (ACME): To test most parameters and single-provisioner updates
# claims-double (ACME + AWS): To test updating multiple provisioners with the same name
- name: Set claim facts
  set_fact:
    claims_single:
      name: claims-single
      type: ACME
      min_tls_cert_duration: 1h
      default_tls_cert_duration: 20h
      enable_SSHCA: yes
      min_host_ssh_duration: 1h
      default_host_ssh_duration: 20h
      max_host_ssh_duration: 24h
      min_user_ssh_duration: 1h
      default_user_ssh_duration: 20h
      max_user_ssh_duration: 24h
    claims_double_1:
      name: claims-double
      type: ACME
      # Different to double_2 to test retention of existing claims with multiple provisioners
      min_tls_cert_duration: 5m
      default_tls_cert_duration: 20h
    claims_double_2:
      name: claims-double
      type: AWS
      min_tls_cert_duration: 1h
      default_tls_cert_duration: 20h
    claims_global:
      global_claims: yes
      min_tls_cert_duration: 1h
      default_tls_cert_duration: 20h

- block:
  - name: Testing provisioners are present
    maxhoesel.smallstep.step_ca_provisioner:
      name: "{{ item.0 }}"
      type: "{{ item.1 }}"
    loop:
      - ["{{ claims_single.name }}", "{{ claims_single.type }}"]
      - ["{{ claims_double_1.name }}", "{{ claims_double_1.type }}"]
      - ["{{ claims_double_2.name }}", "{{ claims_double_2.type }}"]

  # Using a loop isn't possible here - the parameters will get mashed up between
  # provisioners for some reason.
  - name: Testing claims are present [1/4]
    maxhoesel.smallstep.step_ca_provisioner_claims: "{{ claims_single }}"
  - name: Testing claims are present [2/4]
    maxhoesel.smallstep.step_ca_provisioner_claims: "{{ claims_double_1 }}"
  - name: Testing claims are present [3/4]
    maxhoesel.smallstep.step_ca_provisioner_claims: "{{ claims_double_2 }}"
  - name: Testing claims are present [4/4]
    maxhoesel.smallstep.step_ca_provisioner_claims: "{{ claims_global }}"

  # Update the provisioners to test both adding and overwriting claims:
  # - max_tls_cert_duration is newly added
  # - default_tls_cert_duration is changed from 20h -> 24h
  - name: Test updating claims [provisioners]
    maxhoesel.smallstep.step_ca_provisioner_claims:
      name: "{{ item }}"
      max_tls_cert_duration: 33h
      default_tls_cert_duration: 24h
    loop:
      - "{{ claims_single.name }}"
      - "{{ claims_double_1.name }}"
    register: step_ca_current_claims
  - name: Test updating claims [global]
    maxhoesel.smallstep.step_ca_provisioner_claims:
      global_claims: yes
      max_tls_cert_duration: 33h
      default_tls_cert_duration: 24h
    register: step_ca_current_global_claims

  # Combine our initial claims with the updataed ones to verify that everything went well
  - name: Set expected claims
    set_fact:
      expected_single:
        minTLSCertDuration: 1h
        defaultTLSCertDuration: 24h
        maxTLSCertDuration: 33h
        enableSSHCA: yes
        minHostSSHDuration: 1h
        defaultHostSSHDuration: 20h
        maxHostSSHDuration: 24h
        minUserSSHDuration: 1h
        defaultUserSSHDuration: 20h
        maxUserSSHDuration: 24h
      expected_double_1:
        minTLSCertDuration: 5m
        maxTLSCertDuration: 33h
        defaultTLSCertDuration: 24h
      expected_double_2:
        minTLSCertDuration: 1h
        maxTLSCertDuration: 33h
        defaultTLSCertDuration: 24h
      expected_global:
        minTLSCertDuration: 1h
        maxTLSCertDuration: 33h
        defaultTLSCertDuration: 24h
  - name: Validate claims status
    assert:
      quiet: yes
      that:
        - step_ca_current_global_claims.claims == expected_global
        - step_ca_current_claims.results.0.claims[claims_single.type] == expected_single
        - step_ca_current_claims.results.1.claims[claims_double_1.type] == expected_double_1
        - step_ca_current_claims.results.1.claims[claims_double_2.type] == expected_double_2

  - name: Test overwriting claims
    maxhoesel.smallstep.step_ca_provisioner_claims:
      name: "{{ claims_single.name }}"
      type: "{{ claims_single.type }}"
      exclusive: yes
      min_tls_cert_duration: 10m
    register: step_ca_current_claims
  - name: Set expected claim
    set_fact:
      expected_single:
        minTLSCertDuration: 10m
  - name: Validate overwritten claims
    assert:
      quiet: yes
      that: step_ca_current_claims.claims == expected_single

  become: yes
  become_user: "{{ step_ca_user }}"

- name: Restart Server
  service:
    name: step-ca
    state: restarted
  become: yes

- block:
  - name: Check server health
    command: "step-cli ca health"
    changed_when: no
  - name: Testing provisioners are absent
    maxhoesel.smallstep.step_ca_provisioner:
      name: "{{ item.0 }}"
      type: "{{ item.1 }}"
      state: absent
    loop:
      - ["{{ claims_single.name }}", "{{ claims_single.type }}"]
      - ["{{ claims_double_1.name }}", "{{ claims_double_1.type }}"]
      - ["{{ claims_double_2.name }}", "{{ claims_double_2.type }}"]
  become: yes
  become_user: "{{ step_ca_user }}"
